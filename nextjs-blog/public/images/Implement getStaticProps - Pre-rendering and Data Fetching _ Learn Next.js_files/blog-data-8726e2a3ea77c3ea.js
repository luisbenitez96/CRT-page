(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1822],{2576:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/learn/basics/data-fetching/blog-data",function(){return a(37323)}])},37323:function(e,n,a){"use strict";a.r(n),a.d(n,{meta:function(){return u},default:function(){return j}});var s=a(24246),t=a(27378),o=a(65977),p=a(8990),r=a(75691);function c(e,n){for(var a=0;a<n.length;a++){var s=n[a];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function i(e,n){if(null==e)return{};var a,s,t=function(e,n){if(null==e)return{};var a,s,t={},o=Object.keys(e);for(s=0;s<o.length;s++)a=o[s],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)a=o[s],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}function l(e,n){return!n||"object"!==h(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function d(e,n){return(d=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var h=function(e){return e&&"undefined"!==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},u={title:"Pre-rendering and Data Fetching",courseId:"basics",lessonId:"data-fetching",stepId:"blog-data",subtitle:"Blog Data"},N={meta:u},j=function(e){function n(e){var a;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(a=l(this,m(n).call(this,e))).layout=function(e){var n=e.children;return(0,s.jsx)(p.Z,{meta:u,children:n})},a}var a,t,h;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&d(e,n)}(n,e),a=n,(t=[{key:"render",value:function(){var e=this.props,n=e.components,a=i(e,["components"]);return(0,s.jsxs)(o.XJ,{name:"wrapper",Layout:this.layout,layoutProps:Object.assign({},N,a),components:n,children:[(0,s.jsx)(o.XJ,{name:"p",components:n,children:"We\u2019ll now add blog data to our app using the file system. Each blog post will be a markdown file."}),(0,s.jsxs)(o.XJ,{name:"ul",components:n,children:[(0,s.jsxs)(o.XJ,{name:"li",components:n,parentName:"ul",children:["Create a new top-level directory called ",(0,s.jsx)(o.XJ,{name:"strong",components:n,parentName:"li",children:(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"strong",children:"posts"})})," (this is not the same as ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"li",children:"pages/posts"}),")."]}),(0,s.jsxs)(o.XJ,{name:"li",components:n,parentName:"ul",children:["Inside ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"li",children:"posts"}),", create two files: ",(0,s.jsx)(o.XJ,{name:"strong",components:n,parentName:"li",children:(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"strong",children:"pre-rendering.md"})})," and ",(0,s.jsx)(o.XJ,{name:"strong",components:n,parentName:"li",children:(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"strong",children:"ssg-ssr.md"})}),"."]})]}),(0,s.jsxs)(o.XJ,{name:"p",components:n,children:["Now, copy the following code to ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"p",children:"posts/pre-rendering.md"}),":"]}),(0,s.jsx)(o.XJ,{name:"pre",components:n,props:{className:"language-md"},children:(0,s.jsxs)(o.XJ,{name:"code",components:n,parentName:"pre",props:{className:"language-md"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token hr punctuation"},children:"---"}),"\ntitle: 'Two Forms of Pre-rendering'\n",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token title important"},children:["date: '2020-01-01'\n",(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"---"})]}),"\n\nNext.js has two forms of pre-rendering: ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"Static Generation"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]})," and ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"Server-side Rendering"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]}),". The difference is in ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"when"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]})," it generates the HTML for a page.\n\n",(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token list punctuation"},children:"-"})," ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"Static Generation"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]})," is the pre-rendering method that generates the HTML at ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"build time"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]}),". The pre-rendered HTML is then ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token italic"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"_"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"reused"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"_"})]})," on each request.\n",(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token list punctuation"},children:"-"})," ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"Server-side Rendering"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]})," is the pre-rendering method that generates the HTML on ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"each request"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]}),".\n\nImportantly, Next.js lets you ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"choose"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]}),' which pre-rendering form to use for each page. You can create a "hybrid" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\n']})}),(0,s.jsxs)(o.XJ,{name:"p",components:n,children:["Then, copy the following code to ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"p",children:"posts/ssg-ssr.md"}),":"]}),(0,s.jsx)(o.XJ,{name:"pre",components:n,props:{className:"language-md"},children:(0,s.jsxs)(o.XJ,{name:"code",components:n,parentName:"pre",props:{className:"language-md"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token hr punctuation"},children:"---"}),"\ntitle: 'When to Use Static Generation v.s. Server-side Rendering'\n",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token title important"},children:["date: '2020-01-02'\n",(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"---"})]}),"\n\nWe recommend using ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"Static Generation"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]})," (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\n\nYou can use Static Generation for many types of pages, including:\n\n",(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token list punctuation"},children:"-"})," Marketing pages\n",(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token list punctuation"},children:"-"})," Blog posts\n",(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token list punctuation"},children:"-"})," E-commerce product listings\n",(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token list punctuation"},children:"-"}),' Help and documentation\n\nYou should ask yourself: "Can I pre-render this page ',(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"ahead"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]})," of a user's request?\" If the answer is yes, then you should choose Static Generation.\n\nOn the other hand, Static Generation is ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"not"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]})," a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\n\nIn that case, you can use ",(0,s.jsxs)(o.XJ,{name:"span",components:n,parentName:"code",props:{className:"token bold"},children:[(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token content"},children:"Server-Side Rendering"}),(0,s.jsx)(o.XJ,{name:"span",components:n,parentName:"span",props:{className:"token punctuation"},children:"**"})]}),". It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.\n"]})}),(0,s.jsx)(o.XJ,{name:"blockquote",components:n,children:(0,s.jsxs)(o.XJ,{name:"p",components:n,parentName:"blockquote",children:["You might have noticed that each markdown file has a metadata section at the top containing ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"p",children:"title"})," and ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"p",children:"date"}),". This is called YAML Front Matter, which can be parsed using a library called ",(0,s.jsx)(o.XJ,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/jonschlinkert/gray-matter"},children:"gray-matter"}),"."]})}),(0,s.jsxs)(o.XJ,{name:"h3",components:n,children:["Parsing the Blog Data on ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"h3",children:"getStaticProps"})]}),(0,s.jsxs)(o.XJ,{name:"p",components:n,children:["Now, let\u2019s update our index page (",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"p",children:"pages/index.js"}),") using this data. We\u2019d like to:"]}),(0,s.jsxs)(o.XJ,{name:"ul",components:n,children:[(0,s.jsxs)(o.XJ,{name:"li",components:n,parentName:"ul",children:["Parse each markdown file and get ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"li",children:"title"}),", ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"li",children:"date"}),", and file name (which will be used as ",(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"li",children:"id"})," for the post URL)."]}),(0,s.jsx)(o.XJ,{name:"li",components:n,parentName:"ul",children:"List the data on the index page, sorted by date."})]}),(0,s.jsxs)(o.XJ,{name:"p",components:n,children:["To do this on pre-render, we need to implement ",(0,s.jsx)(o.XJ,{name:"a",components:n,parentName:"p",props:{href:"/docs/basic-features/data-fetching#getstaticprops-static-generation"},children:(0,s.jsx)(o.XJ,{name:"inlineCode",components:n,parentName:"a",children:"getStaticProps"})}),"."]}),(0,s.jsx)(r.Z,{shadow:!0,alt:"Index Page",oversize:!1,src:"/static/images/learn/data-fetching/index-page.png",width:623,height:474}),(0,s.jsx)(o.XJ,{name:"p",components:n,children:"Let\u2019s do it on the next page!"})]})}}])&&c(a.prototype,t),h&&c(a,h),n}(t.Component);j.isMDXComponent=!0}},function(e){e.O(0,[9774,4442,7879,6337,7835,3502,7769,5691,2888,179],(function(){return n=2576,e(e.s=n);var n}));var n=e.O();_N_E=n}]);